# Generated by Django 2.2.12 on 2020-06-11 08:32

from django.db import migrations, IntegrityError, transaction
# not the best way, but we are sure CompanyProfile wont change in future..
# Well polymorphic model doestn support "dget_model"
from aklub.models import CompanyProfile

class Migration(migrations.Migration):

    dependencies = [
        ('aklub', '0079_auto_20200611_1000'),
    ]

    def migrate_company_data(apps, schema_editor):
        companies = CompanyProfile.objects.all()
        CompanyContact = apps.get_model("aklub", "CompanyContact")
        Telephone = apps.get_model("aklub", "Telephone")
        ProfileEmail = apps.get_model("aklub", "ProfileEmail")
        for company in companies:
            # polymorphic model has problems with objects.. so we use IDs..
            # also historical memory remember only parent model Profile, so we use it instead of child model
            tel_queryset = Telephone.objects.filter(user_id=company.profile_ptr.id)
            email_queryset = ProfileEmail.objects.filter(user_id=company.profile_ptr.id)
            telephones = list(tel_queryset)
            emails = list(email_queryset)
            # make both lists same length
            if len(telephones) > len(emails):
                emails.extend([''] * (len(telephones)-len(emails)))
            elif len(telephones) < len(emails):
                telephones.extend([''] * (len(emails)-len(telephones)))
            else:
                pass
            # mix up emails and telephones
            for i, email in enumerate(emails):
                # we create companycontact for every
                for unit in company.administrative_units.all():
                    contact = CompanyContact.objects.create(
                        company_id=company.id,
                        contact_first_name=company.contact_first_name if company.contact_first_name else "",
                        contact_last_name=company.contact_last_name if company.contact_last_name else "",
                        administrative_unit_id=unit.id,
                        email=emails[i].email if emails[i] else '',
                        telephone=telephones[i].telephone if telephones[i] else '',
                    )
                    if emails[i] and emails[i].is_primary:
                        contact.is_primary = True
                        try:
                            with transaction.atomic():
                                contact.save()
                        except IntegrityError:
                            contact.is_primary = False
                            contact.save()
            # deleting all old data
            tel_queryset.delete()
            email_queryset.delete()
    operations = [
        migrations.RunPython(migrate_company_data, reverse_code=migrations.RunPython.noop),
    ]
